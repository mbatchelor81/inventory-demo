name: SonarQube Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Build and test backend
        run: |
          cd backend
          mvn clean verify
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests with coverage
        run: |
          cd frontend
          CI=true npm test -- --coverage --watchAll=false
      
      - name: SonarQube Scan
        id: sonar-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd backend
          mvn sonar:sonar \
            -Dsonar.projectKey=mbatchelor81_inventory-demo \
            -Dsonar.organization=mbatchelor81 \
            -Dsonar.host.url=https://sonarcloud.io
      
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        with:
          scanMetadataReportFile: backend/target/sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Get Vulnerability Count
        id: quality-gate
        run: |
          # Get vulnerability count from SonarQube
          VULNERABILITIES=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=mbatchelor81_inventory-demo&types=VULNERABILITY&resolved=false" \
            | jq '.total')
          
          echo "vulnerability_count=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "ðŸ“Š Found $VULNERABILITIES vulnerabilities"
      
      - name: Trigger Devin Remediation
        if: steps.quality-gate.outputs.vulnerability_count > 0
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create Devin session for vulnerability remediation
          DEVIN_SESSION=$(curl -X POST "https://api.devin.ai/v1/sessions" \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "SonarQube Vulnerability Remediation - Run #${{ github.run_number }}",
              "repo_url": "${{ github.server_url }}/${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "prompt": "Review the SonarQube scan results for project mbatchelor81_inventory-demo at https://sonarcloud.io/dashboard?id=mbatchelor81_inventory-demo. There are ${{ steps.quality-gate.outputs.vulnerability_count }} vulnerabilities detected.\n\n**IMPORTANT**: You have access to the SonarQube MCP server. Use it to:\n- Query detailed vulnerability information directly from SonarQube\n- Get specific code locations and severity levels\n- Retrieve remediation recommendations from SonarQube\n- Access the full issue context and history\n\n**CRITICAL**: You are working on branch ${{ github.ref_name }} which already has an open PR #${{ github.event.pull_request.number }}. Push your fixes directly to this branch to update the existing PR. DO NOT create a new pull request.\n\nPlease:\n1. Use the SonarQube MCP server to analyze each vulnerability in detail\n2. Review severity levels, affected files, and specific code lines\n3. Fix security vulnerabilities following OWASP best practices\n4. Update dependencies if needed\n5. Ensure all tests pass after fixes\n6. Commit your changes with message: fix: Remediate SonarQube vulnerabilities from scan #${{ github.run_number }}\n7. Push directly to branch ${{ github.ref_name }} to update PR #${{ github.event.pull_request.number }}\n\nCommit message should include:\n- Number of vulnerabilities addressed: ${{ steps.quality-gate.outputs.vulnerability_count }}\n- List of specific vulnerabilities fixed (with SonarQube issue keys)\n- SonarQube Report: https://sonarcloud.io/dashboard?id=mbatchelor81_inventory-demo\n- GitHub Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nFocus on:\n- SQL injection vulnerabilities\n- XSS vulnerabilities\n- Authentication/authorization issues\n- Insecure dependencies\n- Code quality issues that could lead to security problems"
            }')
          
          SESSION_ID=$(echo $DEVIN_SESSION | jq -r '.session_id')
          SESSION_URL=$(echo $DEVIN_SESSION | jq -r '.url')
          
          echo "âœ… Devin session created: $SESSION_URL"
          echo "Session ID: $SESSION_ID"
          
          # Post comment to PR if this is a pull request
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            printf -v COMMENT_BODY '%s\n\n%s\n\n%s\n\n%s' \
              'ðŸ¤– **Devin AI Remediation Triggered**' \
              '${{ steps.quality-gate.outputs.vulnerability_count }} vulnerabilities detected by SonarQube.' \
              "Devin is working on fixes: $SESSION_URL" \
              '[View SonarQube Report](https://sonarcloud.io/dashboard?id=mbatchelor81_inventory-demo)'
            
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
          fi
